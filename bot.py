import configparser
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dataParse import *
import os


config = configparser.ConfigParser()
config.read('config.ini')
TOKEN = config.get('bot','token')
TPA = [
    "Lid 1", "Frame 1", "Cutter 1",
    "Lid 2", "Frame 2", "Cutter 2",
    "Lid 3", "Frame 3", "Cutter 3",
    "Lid 4", "Frame 4", "Cutter 4",
    "Lid 5", "Frame 5", "Cutter 5",
    "Lid 6", "Frame 6", "Cutter 6",
    "Lid 7", "Frame 7", "Cutter 7",
            ]
INDICATORS = [
    "–í—Ä–µ–º—è —Ü–∏–∫–ª–∞", "–î–∞–≤–ª–µ–Ω–∏–µ GreenBox",
    "–ì–Ω—ë–∑–¥–∞", "t¬∞C –º–∞—Å–ª–∞",
    "t¬∞C –Ω–∞ –≤—Ö–æ–¥–µ —Ñ–æ—Ä–º—ã", "t¬∞C –Ω–∞ –≤—ã—Ö–æ–¥–µ —Ñ–æ—Ä–º—ã",
              ]

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start', 'help'])
def send_hello(message):
    bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç! üëã 
–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç—á—ë—Ç–æ–≤ 1–°:–¢–û–ò–† üõ†
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç—á—ë—Ç –∏–∑ 1–°:–¢–û–ò–† –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx
–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –º–∞—à–∏–Ω—É –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å,
–∞ —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ üìà
""")
    
@bot.message_handler(content_types=['document'])
def save_document(message):
    file_info = bot.get_file(message.document.file_id)
    file_name = file_info.file_path
    if file_name.endswith('.xlsx'):
        print(file_info)
        downloaded_file = bot.download_file(file_name)
        with open('1.xlsx', 'wb') as f:
            f.write(downloaded_file)
        bot.send_message(message.chat.id, f'–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
    else:
        bot.send_message(message.chat.id, f"""–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ {file_name.split('.')[-1]}
–¢–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx""")


def check_xlsx_files_in_directory(message):
    files_and_dirs = os.listdir(".")
    xlsx_files = [f for f in files_and_dirs if f.endswith('.xlsx') and os.path.isfile(os.path.join(".", f))]

    if xlsx_files: return True
    else:
        bot.send_message(message.chat.id, f"""
–í –º–æ—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx)""")
        return False

@bot.message_handler(commands=['stats'])
def send_stats(message):
    if check_xlsx_files_in_directory(message):
        markup = InlineKeyboardMarkup(row_width=3)
        buttons = [InlineKeyboardButton(f"{tpa}", callback_data=f"m_{tpa}") for tpa in TPA]
        markup.add(*buttons)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("m_"))
def first_group_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    tpa = call.data.split("_")[1]
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(f"{ind}", 
        callback_data=f"i_{tpa}_{ind}") for ind in INDICATORS]
    markup.add(*buttons)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("i_"))
def second_group_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    _, tpa, ind = call.data.split("_")
    bot.send_message(call.message.chat.id,  f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, –æ–∂–∏–¥–∞–π—Ç–µ")
    image_path = plot_metric_for_machine(tpa, ind)
    if image_path is not None:
        print(image_path)
        with open(image_path, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo)
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {tpa} {ind}")
    bot.delete_message(call.message.chat.id, call.message.message_id)

    




if __name__ == '__main__':
    bot.infinity_polling()